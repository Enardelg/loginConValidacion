
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                       # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: loginConValidacion           # set this to your Amazon ECR repository name
                                              # set this to the path to your Amazon ECS task definition
                                              # file, e.g. .aws/task-definition.json
                                              # set this to the name of the container in the
                                              # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: 1.0.0
      run: |
        # Crear un archivo temporal para el texto "Hola Mundo"
        echo "Hola Mundo" > hello_world.txt

        # Copiar el archivo "hello_world.txt" a la imagen del contenedor
        docker cp hello_world.txt .

        # Generar una imagen Docker y enviarla a ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
